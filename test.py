#!/usr/bin/python

import secp256r1_python
import secp256r1_openssl
import secp256k1_python
import secp256k1_openssl
import secp256k1_libsecp256k1
import ed25519_python
import ed25519_donna

vectors_secp256r1 = {
'g': [48439561293906451759052585252797914202762949526041747995844080717082404635286, 36134250956749795798585127919587881956611106672985015071877198253568414405109],
'g_inv': [48439561293906451759052585252797914202762949526041747995844080717082404635286, 79657838253606452964112319029819691573475036742305299123656433055298683448842],
'order': 115792089210356248762697446949407573529996955224135760342422259061068512044369,
'g_comp': '036b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296',
'inf': [None, None],
'inf_comp': '000000000000000000000000000000000000000000000000000000000000000000',
'g5': [36794669340896883012101473439538929759152396476648692591795318194054580155373, 101659946828913883886577915207667153874746613498030835602133042203824767462820],
'g5_8': [86222347201559349904812530919676791408269501278505609675332887656549912973798, 15346536129593283964384436338679371430656521573131082644955319343785690078492],
'g5+g5_8': [76246189711409413609407872185163127956872261390953498203715819179346772408835, 82135071452153853020721962998351474651931828837750587593595036558376106013870],
'invalid': [123,456],
}

vectors_secp256k1 = {
'g': [55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424],
'g_inv': [55066263022277343669578718895168534326250603453777594175500187360389116729240, 83121579216557378445487899878180864668798711284981320763518679672151497189239],
'order': 115792089237316195423570985008687907852837564279074904382605163141518161494337,
'g_comp': '0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
'inf': [None, None],
'inf_comp': '000000000000000000000000000000000000000000000000000000000000000000',
'g5': [21505829891763648114329055987619236494102133314575206970830385799158076338148, 98003708678762621233683240503080860129026887322874138805529884920309963580118],
'g5_8': [65977930378964483966842705159007630837451149704819265634327747226133817150731, 106574384264472205627876631445935175739834375489227447805380155393950263965849],
'g5+g5_8': [2069755349039566255304036353648839232649715781170511813011535420394543798627, 53173698995439924366951845531266805314230463309822098990695656330917108292762],
'invalid': [123,456],
}

vectors_ed25519 = {
'g': [15112221349535400772501151409588531511454012693041857206046113283949847762202, 46316835694926478169428394003475163141307993866256225615783033603165251855960],
'g_inv': [42783823269122696939284341094755422415180979639778424813682678720006717057747, 46316835694926478169428394003475163141307993866256225615783033603165251855960],
'order': 7237005577332262213973186563042994240857116359379907606001950938285454250989,
'g_comp': '02216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
'inf': [0,1],
'inf_comp': '030000000000000000000000000000000000000000000000000000000000000000',
'g5': [33467004535436536005251147249499675200073690106659565782908757308821616914995, 43097193783671926753355113395909008640284023746042808659097434958891230611693],
'g5_8': [34426924428514608760437100447421064591311588584549077394333265447466212246087, 29872771498517479181395568267318965384440757492476580330810382845026939417492],
'g5+g5_8': [37902829691545166284213691511066751630225703343383256556677833754086067912016, 16994664663517399287148722075068506437968764501348821155246371716892440968161],
'invalid': [123,456],
}

curves = [
    {'name':'secp256r1 (openssl)', 'curve': secp256r1_openssl, 'vectors': vectors_secp256r1},
    {'name':'secp256r1 (python)', 'curve': secp256r1_python.curve, 'vectors': vectors_secp256r1},
    {'name':'secp256k1 (openssl)', 'curve': secp256k1_openssl, 'vectors': vectors_secp256k1},
    {'name':'secp256k1 (python)', 'curve': secp256k1_python.curve, 'vectors': vectors_secp256k1},
    {'name':'secp256k1 (libsecp256k1)', 'curve': secp256k1_libsecp256k1, 'vectors': vectors_secp256k1},
    {'name':'ed25519 (python)', 'curve': ed25519_python.curve, 'vectors': vectors_ed25519},
    {'name':'ed25519 (ed25519-donna)', 'curve': ed25519_donna, 'vectors': vectors_ed25519},
]

for curve_info in curves:

    print "[+] Testing curve %s..." % (curve_info['name'])
    curve = curve_info['curve']
    vectors = curve_info['vectors']

    assert(curve.g == vectors['g'])
    assert(curve.inv(curve.g) == vectors['g_inv'])
    assert(curve.n == vectors['order'])
    assert(curve.compress(curve.g).encode('hex') == vectors['g_comp'])
    assert(curve.decompress(vectors['g_comp'].decode('hex')) == vectors['g'])
    assert(curve.add(curve.g, curve.inv(curve.g)) == vectors['inf'])
    assert(curve.compress(vectors['inf']).encode('hex') == vectors['inf_comp'])
    assert(curve.decompress(vectors['inf_comp'].decode('hex')) == vectors['inf'])
    assert(curve.mul(curve.g, 5) == vectors['g5'])
    assert(curve.mul(vectors['g5'],8) == vectors['g5_8'])
    assert(curve.add(vectors['g5'], vectors['g5_8']))
    assert(curve.valid(curve.g)==1)
    assert(curve.valid(vectors['invalid'])==0)
